#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Walrus {
            bindings = <&Walrus>;
            key-positions = <17 18>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };
    };

    macros {
        Walrus: Walrus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "WALRUS";
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLHOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <6 18 30 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRHOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp TAB    &kp Q            &kp W            &kp E              &kp R         &kp T          &kp Y        &kp U          &kp I               &kp O             &kp P                     &kp MINUS
&kp LCTRL  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G          &kp H        &hmr RCTRL J   &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp LSHFT  &kp Z            &kp X            &kp C              &kp V         &kp B          &kp N        &kp M          &kp COMMA           &kp DOT           &kp FSLH                  &kp EQUAL
                                             &kp RGUI           &kp ENTER     &lt 1 SPACE    &lt 2 SPACE  &kp BACKSPACE  &kp RIGHT_ALT
            >;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7    &kp F8         &kp F9       &kp F10    &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans   &trans
                        &trans  &trans  &trans    &trans    &trans         &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR            &kp PERCENT       &kp CARET        &kp AMPERSAND          &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp N1           &kp N2       &kp N3            &kp N4                &kp N5            &kp N6           &kp N7                 &kp N8             &kp N9                &kp N0                 &trans
&trans  &kp ESCAPE       &kp GRAVE    &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &trans                &trans                 &kp BACKSLASH
                                      &trans            &trans                &trans            &trans           &trans                 &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans      &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans      &trans      &trans  &trans  &trans
                        &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Bluetooth {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
